{"version":3,"sources":["logo.svg","components/createToDo.js","components/Tasklist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Createtodo","props","useState","todo","setTodo","submitTodo","replace","length","parentCall","alert","class","type","value","placeholder","onChange","e","target","onKeyPress","event","key","onClick","Tasklist","list","profileState","setProfileState","useEffect","className","name","emptyMessage","emptyTip","map","task","index","action","icon","delete","getFromStorage","listname","tasksList","localStorage","getItem","split","document","title","App","useReducer","myArray","sort","filter","_","undoneTasks","dispatchUndone","doneTask","dispatchDone","setItem","href","rel","id","window","confirm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c10f5887.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState,useEffect} from 'react';\r\n\r\nfunction Createtodo(props) {\r\n    \r\n    const[todo,setTodo]= useState(\"\");\r\n\r\n    function submitTodo(){\r\n        if(!todo){\r\n           alert(\"Please write a task\")\r\n        }else if(!todo.replace(/\\s/g, '').length)//Verify if the new task only contains empty space\r\n        {\r\n            alert(\"Pleas write a task\")\r\n            setTodo(\"\") //Erase the empty spaces\r\n        }\r\n            else{\r\n            props.parentCall(todo) //Send to the parent the new task, so it will add it to the list\r\n            setTodo(\"\")//Clear the input fiield\r\n        }\r\n    }\r\n\r\n    function completeTodo(index){\r\n        console.log(index)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div class=\"input-group mb-3\">\r\n            <input type=\"text\"  \r\n                class=\"form-control\" \r\n                value={todo} \r\n                placeholder=\"Create a new task\"\r\n                onChange={e => setTodo(e.target.value)} //On Change handler\r\n                onKeyPress={event => {if(event.key == \"Enter\"){submitTodo()}}} //Enter key handler\r\n            />\r\n        <div class=\"input-group-append\">\r\n            <button type=\"button\" class=\"btn btn-primary\" \r\n                onClick={submitTodo}//Click handler\r\n            >\r\n                Save\r\n            </button>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Createtodo;\r\n  ","// This module recieves a list of task form the parent an displays it in a bullet list format.\r\n// It also receives some predefined data such as the List Name and messages if the list is empty\r\n\r\nimport React, {useState,useEffect} from 'react';\r\nimport \"../style/Tasklist.css\"\r\n\r\nfunction Tasklist(props){\r\n    const [tasklist,setList] = useState(props.list)\r\n    const [profileState, setProfileState] = useState(props);\r\n\r\n    //This hook is used to detect changes in the props of the element from the parent\r\n    useEffect(() => {\r\n        setProfileState(props);\r\n    }, [props]);\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    {profileState.name}\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {/*This section verifies if the list is empty*/}\r\n                    {profileState.list.length===0? /*If it is, it will show a friendly message to the user*/\r\n                    <div>\r\n                        <h5>{profileState.emptyMessage}</h5>\r\n                        <h6>{profileState.emptyTip}</h6>\r\n                    </div>\r\n                        :\r\n                        <></>\r\n                    }\r\n                    <ul>\r\n                        {/*Generate a element in the list for each task*/}\r\n                       {profileState.list.map((task,index)=>(\r\n                           <li className=\"task\">\r\n                               <div className=\"containder\">\r\n                                   <div className=\"row\">\r\n                                        <div className=\"col-11\"\r\n                                            onClick={()=>profileState.action(index)}>\r\n                                            <i className=\"material-icons check\">{profileState.icon}</i> {task}\r\n                                        </div>\r\n                                        <div className=\"col-1\"> \r\n                                                <i className=\"material-icons text-danger\"\r\n                                                    onClick={()=>profileState.delete(index)}>\r\n                                                    delete\r\n                                                </i>\r\n                                        </div>\r\n                                   </div>\r\n                               </div>\r\n                            </li>\r\n                       ))}\r\n                        \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasklist;","import React, {useState, useEffect,useReducer} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Createtodo from './components/createToDo'\nimport Tasklist from './components/Tasklist'\n\n\ndocument.title = \"What to do?\"\n\n//This function gets the given local storaged variable from the navigator.\nfunction getFromStorage(listname){\n  const tasksList =  localStorage.getItem(listname)\n  //Verifies if the variable exists\n  if(!tasksList){\n    return []\n  }else{\n    return tasksList.split(\",\");\n  }\n}\n\nfunction App() {\n\n  function updateLocalStorage(){\n    localStorage.setItem(\"undoneList\",undoneTasks) //Save the lists in the local storage\n    localStorage.setItem(\"doneList\",doneTask) \n  }\n\n  //Special hook called Reducer Hook. This hook is recommended for multivalue states such as Arrays\n  const [undoneTasks, dispatchUndone] = useReducer((myArray, { type, value }) => {\n    switch (type) {\n      case \"add\":\n        return [...myArray, value].sort();\n      case \"remove\":\n        return myArray.filter((_, index) => index !== value);\n      default:\n        return myArray;\n    }}, getFromStorage(\"undoneList\"))\n\n    //Reducer Hook to storage the List of the Done tasks\n    const [doneTask, dispatchDone] = useReducer((myArray, { type, value }) => {\n      switch (type) {\n        case \"add\":\n          return [...myArray, value].sort();\n        case \"remove\":\n          return myArray.filter((_, index) => index !== value);\n        default:\n          return myArray;\n      }}, getFromStorage(\"doneList\"))\n\n  function addTask(task){\n    //Add the given task to the undone list and sort it using the Javascript Array Sort\n    dispatchUndone({ type: \"add\", value: task })\n  }\n\n  function deleteUndone(index){\n    //Ask the user for a confirmation\n    if(!window.confirm(\"Are you sure to delete the task: \"+ undoneTasks[index])){\n      return\n    }\n    //Use the hook to update de value\n    dispatchUndone({ type: \"remove\", value: index })\n  }\n\n\n  function deleteDone(index){\n    //Ask the user for a confirmation\n    if(!window.confirm(\"Are you sure to delete the task: \"+ undoneTasks[index])){\n      return\n    }\n    //Use the hook to update de value\n    dispatchDone({ type: \"remove\", value: index })\n  }\n\n  function setDone(index){\n    //Save the selected task into the done list\n    dispatchDone({type:\"add\",value:undoneTasks[index]})\n    //Delete the task from the undone list\n    dispatchUndone({type:\"remove\",value:index})\n  }\n\n  function setUndone(index){\n    //Save the selected task into the undone list\n    dispatchUndone({type:\"add\",value:doneTask[index]})\n    //Delete the task from the done list\n    dispatchDone({type:\"remove\",value:index})\n  }\n\n  //This hook activates every time one of the tasks hook is changed\n  useEffect(()=>{\n    updateLocalStorage()//Save the changes on the tasks lists\n  })\n\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css?family=Material+Icons\" rel=\"stylesheet\"></link>\n      <header className=\"App-header\">\n        <h1>My To-do List</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n           {/*Task creator Module*/}\n            <div className=\"col-sm-12\">\n              <Createtodo parentCall={addTask}/>\n            </div>\n            {/*Undone Task List Display Module*/}\n            <div className=\"col-sm-12\">\n              <Tasklist \n                id=\"undone\" \n                name=\"My To-do List\" \n                icon=\"panorama_fish_eye\" \n                list={undoneTasks} \n                delete={deleteUndone} \n                action={setDone}\n                emptyMessage=\"There is nothing to do!\"\n                emptyTip=\"Try adding a new task using the field above\"\n                />\n            </div>\n            {/*Done Tasks List Display Module */}\n            <div className=\"col-sm-12\">\n              <Tasklist \n                id=\"done\" \n                name=\"My Done Activities\" \n                icon=\"check_circle\" \n                list={doneTask} \n                delete={deleteDone} \n                action={setUndone}\n                emptyMessage=\"You haven't completed any task\"\n                emptyTip=\"Complete any task by checking it\"\n                />\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}